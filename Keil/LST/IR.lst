C51 COMPILER V9.60.0.0   IR                                                                08/22/2022 03:21:28 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE IR
OBJECT MODULE PLACED IN .\Output\IR.obj
COMPILER INVOKED BY: C:\Keil_v5_8051\C51\BIN\C51.EXE ..\IR.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\..\..\Library\Device\
                    -Include;..\..\..\..\Library\StdDriver\inc;..\..\Timer2_AutoReload_Capture) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(
                    -.\LST\IR.lst) TABS(2) OBJECT(.\Output\IR.obj)

line level    source

   1          #include "IR.h"
   2          
   3          #define IR_IN_VAL P11
   4          
   5          #define NUM_BIT 24
   6          
   7          #define START_MIN   1400
   8          #define START_MAX   1500
   9          #define PRIMARY_MIN 580
  10          #define PRIMARY_MAX 680
  11          #define SECOND_MIN  150
  12          #define SECOND_MAX  250
  13          
  14          static void tim2_init(void);
  15          static void cap_init(void);
  16          
  17          #define STATE_IDLE 0
  18          #define STATE_RECEIVE 1
  19          #define STATE_CHECK_BIT_0 2
  20          #define STATE_CHECK_BIT_1 3
  21          #define STATE_DECODE_SUCC 4
  22          
  23          typedef void (*pfunc)(void);
  24          
  25          uint32_t button_state[4];
  26          uint8_t index = 0;
  27          
  28          void idle_state(void);
  29          void receive_state(void);
  30          void check_bit_0_state(void);
  31          void check_bit_1_state(void);
  32          void decode_succ_state(void);
  33          
  34          static pfunc funcSet[] = {
  35            idle_state,
  36            receive_state,
  37            check_bit_0_state,
  38            check_bit_1_state,
  39            decode_succ_state
  40          };
  41          
  42          static uint8_t u8State = STATE_IDLE;
  43          static uint8_t u8Count = 0;
  44          static uint32_t u32Result = 0;
  45          
  46          void idle_state(void)
  47          {
  48   1        uint16_t u16Tmp;
  49   1        if (IR_IN_VAL) {
  50   2          u16Tmp = C0H * 256 + C0L;
  51   2          if(u16Tmp > START_MIN && u16Tmp < START_MAX)
  52   2          {
  53   3            u8Count = 0;
C51 COMPILER V9.60.0.0   IR                                                                08/22/2022 03:21:28 PAGE 2   

  54   3            u32Result = 0;
  55   3            u8State = STATE_RECEIVE;
  56   3          }
  57   2          else
  58   2          {
  59   3            u8State = STATE_IDLE;
  60   3          }
  61   2        }
  62   1      }
  63          
  64          void receive_state(void)
  65          {
  66   1        uint16_t u16Tmp;
  67   1        if (!IR_IN_VAL) {
  68   2          u16Tmp = C0H * 256 + C0L;
  69   2          if (u16Tmp > SECOND_MIN && u16Tmp < SECOND_MAX)
  70   2           {
  71   3            u32Result <<= 1;
  72   3            ++u8Count;
  73   3            u8State = STATE_CHECK_BIT_0;
  74   3          } 
  75   2          else if (u16Tmp > PRIMARY_MIN && u16Tmp < PRIMARY_MAX)
  76   2            {
  77   3            u32Result <<= 1;
  78   3            u32Result |= 1;
  79   3            ++u8Count;    
  80   3            u8State = STATE_CHECK_BIT_1;
  81   3          }
  82   2            else
  83   2            {
  84   3              u8State = STATE_IDLE;
  85   3            }
  86   2        }
  87   1      }
  88          
  89          void check_bit_0_state(void)
  90          {
  91   1        uint16_t u16Tmp;
  92   1        if (IR_IN_VAL) {
  93   2          u16Tmp = C0H * 256 + C0L;
  94   2          if (u16Tmp > PRIMARY_MIN && u16Tmp < PRIMARY_MAX) 
  95   2          {
  96   3            u8State = STATE_RECEIVE;
  97   3          } else {
  98   3            u8State = STATE_IDLE;
  99   3          }
 100   2        }
 101   1      }
 102          
 103          void check_bit_1_state(void)
 104          {
 105   1        uint16_t u16Tmp;
 106   1        if (IR_IN_VAL) {
 107   2          u16Tmp = C0H * 256 + C0L;
 108   2          if (u16Tmp > SECOND_MIN && u16Tmp < SECOND_MAX)
 109   2          {
 110   3            u8State = STATE_RECEIVE;
 111   3          } else {
 112   3            u8State = STATE_IDLE;
 113   3          }
 114   2        }
 115   1      }
C51 COMPILER V9.60.0.0   IR                                                                08/22/2022 03:21:28 PAGE 3   

 116          
 117          void decode_succ_state(void)
 118          {
 119   1        if(button_state[index] != u32Result)
 120   1        {
 121   2          if(index < 1)
 122   2          {
 123   3            button_state[index] = u32Result;
 124   3          }
 125   2          else if(button_state[index -1] != u32Result)
 126   2          {
 127   3            button_state[index] = u32Result;
 128   3          }
 129   2        }
 130   1        else
 131   1        {
 132   2          index++;
 133   2        }
 134   1      }
 135          
 136          static void tim2_init(void)
 137          {
 138   1         TIMER2_CAP0_Capture_Mode;
 139   1          
 140   1          TIMER2_DIV_16;
 141   1          set_T2CON_TR2;
 142   1      }
 143          
 144          static void cap_init(void)
 145          {
 146   1        IC1_P11_CAP0_BOTHEDGE_CAPTURE;
 147   1      }
 148          
 149          void IR_Init(void)
 150          {
 151   1        u8State = STATE_IDLE;
 152   1          u32Result = 0;
 153   1          u8Count = 0;
 154   1          cap_init();
 155   1          tim2_init();
 156   1        
 157   1      }
 158          
 159          uint8_t IR_Check(uint32_t *pu32Cmd)
 160          {
 161   1        if (TF2) {
 162   2          TF2 = 0;
 163   2          u8State = STATE_IDLE;
 164   2        }
 165   1        if (CAPCON0 & (1<<0)) {
 166   2          funcSet[u8State]();
 167   2          CAPCON0 &= ~(1<<0);
 168   2          if (u8Count == NUM_BIT) 
 169   2          {
 170   3            u8Count = 0;
 171   3            decode_succ_state();
 172   3            u8State = STATE_IDLE;
 173   3            *pu32Cmd = u32Result;
 174   3            return 1;
 175   3          }
 176   2        }
 177   1        return 0;
C51 COMPILER V9.60.0.0   IR                                                                08/22/2022 03:21:28 PAGE 4   

 178   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    482    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     38       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
